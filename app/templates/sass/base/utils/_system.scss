// define
// this mixin makes it possible to have a file imported at multiple place and only be output the first time it is called
// it is used for placeholders to prevent them from being repeated by each file depending on them
$modules: () !default;
@mixin define($uniqeRef) {
    @if not index($modules, $uniqeRef) {
        $modules: append($modules, $uniqeRef);
        @content;
    }
}


// breakpoint
// this mixin needs to be used to enter a @media that will let use use cross-media placeholders
// ex:
//@include breakpoint(medium) {
//  .selector {
//    @include _use(clearfix);
//  }
//}

// system variables
$default-breakpoint: root;
$current-breakpoint: $default-breakpoint;
$placeholders: ();

@mixin breakpoint($breakpoint) {
    // Get the width from the keyword `$breakpoint`
    // Or `null` if the keyword doesn't exist in `$breakpoints` map
    $value: map-get($breakpoints, $breakpoint);

    // If `$breakpoint` exists as a key in `$breakpoints`
    @if $value != null {
        // Update `$current-breakpoint`
        $current-breakpoint: $breakpoint !global;

        // Open a media query block
        @media (min-width: $value) {
            // Let the user dump content
            @content;
        }

        // Then reset `$current-breakpoint` to `$default-breakpoint` (root)
        $current-breakpoint: $default-breakpoint !global;
    }

    // If `$breakpoint` doesn't exist in `$breakpoints`,
    // Warn the user and do nothing
    @else {
        @warn "Invalid breakpoint `#{$breakpoint}`.";
    }
}

// placeholder
@mixin _add($name) {
    // If placeholder doesn't exist yet in `$placeholders` list
    @if not index($placeholders, $name) {
        // Store its name
        $placeholders: append($placeholders, $name) !global;

        // At root level
        @at-root {
            // Looping through `$breakpoints`
            @each $breakpoint, $value in $breakpoints {
                // Opening a media query block
                @media (min-width: $value) {

                // set the current-breakpoint so that nested calls to _use can work
                $current-breakpoint: $breakpoint !global;

                // Generating a placeholder
                // Called $name-$breakpoint
                %#{$name}-#{$breakpoint} {
                    // dump the content
                    @content;
                }

                // reset current-breakpoint
                $current-breakpoint: $default-breakpoint !global;
                }
            }

            // And dumping a placeholder out of any media query as well
            // so basically at root level
            %#{$name} {
                @content;
            }
        }
    }

    // If placeholder already exists, just warn the user
    //@else {
    //    @warn "Placeholder `#{$name}` already exists.";
    //}
}

// placeholder implementor

@mixin _use($name) {
    @if $current-breakpoint == $default-breakpoint {
        @extend %#{$name} !optional;
    } @else {
        @extend %#{$name}-#{$current-breakpoint} !optional;
    }
}


@function palette($palette, $tone: "base") {
    $palette-color: map-get($palettes, $palette);

    @if $palette-color == null {
        @warn "`#{$palette}` does not exist in palettes.";
    }
    $palette-tone: map-get($palette-color, $tone);

    @if $palette-tone == null {
        @warn "`#{$tone}` does not exist in palettes";
    }

    @return map-get($palette-color, $tone);
}


@function font-family($name: "f-body") {
    $font-family: map-get($font-families, $name);

    @if $font-family == null {
        @warn "`#{$name}` doesn't exist in $font-families map. Please choose from:";
        @each $font-family in $font-families {
            @warn " #{$font-family}";
        }
        @warn ".";
    }

    @return $font-family;
}


@function size($size, $unit, $multiplier:'', $unitless:false) {
    // $size accepts
    // • a value from font-size map,
    // • a unitless value (treated as rem)
    // • a px value
    // $unit accepts
    // • px or rem
    // $multiplier accepts
    // • int/decimal
    // (only applicable when no $size is supplied)
    // $unitless accepts
    // • bool
    // Returns
    // • size in rem with px fallback
    // or if $unitless
    // • $size

    @if $unitless == true {
        @return $size;
    } @else {
        @if $size == "" {
            @if $multiplier != '' {
                // Work out rem from px value using multiplier
                @if $unit == px {
                    @return ($base-font-size * $multiplier) + px;
                } @else {
                    @return ((($base-font-size * $multiplier) / ($base-font-size * 0 + 1)) / $base-font-size) + rem;
                }
            } @else {
                // Work out rem from px value
                @if $unit == px {
                    @return $base-font-size + px;
                } @else {
                    @return (($base-font-size / ($base-font-size * 0 + 1)) / $base-font-size) + rem;
                }
            }

        } @else {
            $user-font-size: map-get($font-size, $size);

            @if $user-font-size != null {
                @if $unit == px {
                    @return ($user-font-size * $base-font-size) + px;
                } @else {
                    @return $user-font-size + rem;
                }
            } @else if unit($size) == '' or unit($size) == rem {
                // Rem or no unit treat as rem
                @if $unit == px {
                    @return (($size / ($size * 0 + 1)) * $base-font-size) + px;
                } @else {
                    @return ($size / ($size * 0 + 1)) + rem;
                }
            } @else if unit($size) == 'px'{
                // Work out rem from px value
                @if $unit == px {
                    @return $size;
                } @else {
                    @return (($size / ($size * 0 + 1)) / $base-font-size) + rem;
                }
            } @else {
                @warn "Font size error: use a value from the size map, a unitless rem value or a px value";
            }
        }
    }
}